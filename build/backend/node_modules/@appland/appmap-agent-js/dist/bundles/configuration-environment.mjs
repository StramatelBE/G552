import { readFile } from 'node:fs/promises';
import { URL as URL$1 } from 'node:url';

const toAbsoluteUrl = (relative, base_url) =>
  new URL$1(
    /^[a-zA-Z]:\/[^/]/u.test(relative) ? `/${relative}` : relative,
    base_url,
  ).href;

// Consistent way to retreive home url in prod and test.

const {
  URL,
  JSON: { parse: parseJSON$1 },
} = globalThis;

let url = toAbsoluteUrl(".", import.meta.url);

while (!url.endsWith("appmap-agent-js/")) {
  url = toAbsoluteUrl("..", url);
}

const self_directory = url;

const self_package = parseJSON$1(
  await readFile(
    new URL(toAbsoluteUrl("package.json", self_directory)),
    "utf8",
  ),
);

self_package.version;

const { Error: Error$1 } = globalThis;

class AppmapError extends Error$1 {}

class InternalAppmapError extends AppmapError {
  constructor(message) {
    super(message);
    this.name = "InternalAppmapError";
  }
}

const assert = (boolean, message, Constructor) => {
  if (!boolean) {
    throw new Constructor(message);
  }
};

const {
  Error,
  Reflect: { apply },
  WeakMap,
} = globalThis;

new WeakMap();

// export const applySafe = (closure, context, inputs, log, recovery) => {
//   try {
//     return apply(closure, context, inputs);
//   } catch (error) {
//     log(error);
//     return recovery;
//   }
// };

const {
  undefined: undefined$1,
  Object: Object$1,
  Reflect: { getOwnPropertyDescriptor, ownKeys, defineProperty },
} = globalThis;

/* c8 ignore start */
const hasOwnProperty =
  getOwnPropertyDescriptor(Object$1, "hasOwn") === undefined$1
    ? (object, key) => getOwnPropertyDescriptor(object, key) !== undefined$1
    : Object$1.hasOwn;

const {
  JSON: { parse: parseJSON },
} = globalThis;

const loadEnvironmentConfiguration = (env) => {
  assert(
    hasOwnProperty(env, "APPMAP_CONFIGURATION"),
    "Missing 'APPMAP_CONFIGURATION' environment variable",
    InternalAppmapError,
  );
  const { APPMAP_CONFIGURATION: content } = env;
  const configuration = parseJSON(content);
  return configuration;
};

export { loadEnvironmentConfiguration };
